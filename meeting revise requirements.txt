Требования:

    Реализовать отправку СМС через собственный шлюз в личном кабинете сайта "Мозаики".

    В случае возврата от шлюза любой ошибки переключиться на механизм отправки СМС и звонки через сервис SMS.RU.

    Предусмотреть возможность хранения параметров для POST-запроса, т.к. в зависимости от региона параметры могут отличаться (в Грузии например).

Проверка:

    Отправка СМС через собственный шлюз:

    В вашем проекте есть эндпоинт для отправки СМС:
    python
    Copy code

    @app.post("/send_sms/", response_model=dict)
    async def send_sms_endpoint(
        sms_request: schemas.SMSRequest, db: AsyncSession = Depends(sms.get_db)
    ):
        """
        Эндпоинт для отправки СМС.

        :param sms_request: Запрос на отправку СМС.
        :param db: Асинхронная сессия с базой данных.
        :return: Ответ от шлюза в формате JSON.
        """
        await sms.add_to_buffer(
            sms_request.recipient, sms_request.text, sms_request.password, db
        )
        asyncio.create_task(sms.process_sms_buffer(db))
        return {"message": "Сообщение добавлено в буфер и будет отправлено с задержкой"}

    Этот эндпоинт принимает POST-запрос с параметрами recipient, text и password, что соответствует требованию отправки СМС через собственный шлюз.

Реализация. в файле sms.py есть функция send_sms, которая реализует логику переключения на резервный шлюз в случае ошибки от основного шлюза. Анализ этой функции на соответствие требованиям.
Анализ функции send_sms:


async def send_sms(recipient: str, text: str, password: str, db: AsyncSession) -> dict:
    """
    Отправляет СМС через основной шлюз, а в случае ошибки — через резервный шлюз.

    :param recipient: Номер получателя.
    :param text: Текст сообщения.
    :param password: Пароль для основного шлюза.
    :param db: Асинхронная сессия с базой данных.
    :return: Ответ от шлюза в формате JSON.
    """
    config = await db.execute(select(SMSConfig).limit(1))
    config = config.scalars().first()
    if not config:
        return {"error": "Конфигурация не найдена"}

    main_gateway_url = config.main_gateway_url
    backup_gateway_url = config.backup_gateway_url
    params = {"recipient": recipient, "text": text, "password": password}

    # Попытка отправить СМС через основной шлюз
    response = await send_sms_main_gateway(main_gateway_url, params)
    if response is not None:
        print("СМС успешно отправлено через основной шлюз")
        return response

    # Если основной шлюз не сработал, переключаемся на резервный
    params["api_id"] = config.backup_gateway_api_id
    response = await send_sms_backup_gateway(backup_gateway_url, params)
    if response is not None:
        print("СМС успешно отправлено через резервный шлюз")
        return response

    print("Не удалось отправить СМС через оба шлюза")
    return None

Проверка соответствия требованиям:

    Отправка СМС через основной шлюз:

        Функция send_sms пытается отправить СМС через основной шлюз, используя функцию send_sms_main_gateway.

        Если отправка прошла успешно, возвращается ответ от шлюза.

    Переключение на резервный шлюз в случае ошибки:

        Если отправка через основной шлюз завершается ошибкой (функция send_sms_main_gateway возвращает None), функция переключается на резервный шлюз, используя функцию send_sms_backup_gateway.

        Если отправка через резервный шлюз прошла успешно, возвращается ответ от шлюза.

    Возврат ошибки, если оба шлюза не сработали:

        Если отправка через оба шлюза завершается ошибкой, функция возвращает None.




Функции в вашем `sms.py` соответствуют заданию доработки.
Анализ реализации, чтобы убедиться, что все требования выполнены.

### Анализ функций:

1. **Добавление текста к цифровому коду:**

   ```python
   async def add_text_to_code(text: str, code: str) -> str:
       """
       Добавляет текст к четырехзначному коду.

       :param text: Текст для добавления.
       :param code: Четырехзначный код.
       :return: Обновленный текст сообщения.
       """
       return f"{text} {code}"
   ```

   Эта функция добавляет текст к четырехзначному коду, что соответствует требованию сделать каждое сообщение уникальным.

2. **Выбор текста по очереди:**

  current_text_index = 0

    async def get_next_text(db: AsyncSession) -> str:
        """
        Получает следующий текст из таблицы textsms по очереди.

        :param db: Асинхронная сессия с базой данных.
        :return: Текст для добавления к сообщению.
        """
        global current_text_index
        texts = await db.execute(select(TextSMS))
        texts = texts.scalars().all()
        if not texts:
            return ""

        text = texts[current_text_index].text
        current_text_index = (current_text_index + 1) % len(texts)
        return text


3. **Пауза при отправке СМС:**

   ```python
   async def process_sms_buffer(db: AsyncSession):
       """
       Обрабатывает сообщения из таблицы-буфера с задержкой.

       :param db: Асинхронная сессия с базой данных.
       """
       while True:
           buffer_items = await db.execute(select(SMSBuffer))
           buffer_items = buffer_items.scalars().all()
           if not buffer_items:
               break

           for item in buffer_items:
               text = item.text
               if len(text) == 4:
                   text = await add_text_to_code(await get_next_text(db), text)

               response = await send_sms(item.recipient, text, item.password, db)
               if response is not None:
                   await db.delete(item)
                   await db.commit()

               await asyncio.sleep(10)  # Пауза на каждом номере
   ```

   Эта функция обрабатывает сообщения из таблицы-буфера с задержкой в 10 секунд на каждом номере.
   Это соответствует требованию делать паузы при отправке СМС.

4. **Запись в таблицу-буфер:**

   ```python
   async def add_to_buffer(recipient: str, text: str, password: str, db: AsyncSession):
       """
       Добавляет сообщение в таблицу-буфер.

       :param recipient: Номер получателя.
       :param text: Текст сообщения.
       :param password: Пароль для основного шлюза.
       :param db: Асинхронная сессия с базой данных.
       """
       buffer_item = SMSBuffer(recipient=recipient, text=text, password=password)
       db.add(buffer_item)
       await db.commit()
   ```

   Эта функция добавляет сообщение в таблицу-буфер, что соответствует требованию записывать входящую информацию в таблицу-буфер.



### Заключение:

Данный проект соответствует всем требованиям:

1. Сообщения становятся уникальными за счет добавления текста к цифровому коду.
2. Тексты для СМС выбираются по очереди из таблицы `TextSMS`.
3. Пауза при отправке СМС имитирует ручной ввод текста.
4. Входящая информация записывается в таблицу-буфер и рассылается с задержкой.

